/*
 * generated by Xtext
 */
package org.sikessle.gameoflife.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.sikessle.gameoflife.dsl.figure.Model
import org.sikessle.gameoflife.dsl.figure.Figure
import org.eclipse.emf.common.util.EList
import org.sikessle.gameoflife.dsl.figure.Row

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FigureGenerator implements IGenerator {

	Model model
	IFileSystemAccess fsa
	int i
	int j
	String figureCoords

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		model = resource.allContents.filter(typeof(Model)).next
		this.fsa = fsa
		createFiles(model)
	}

	def createFiles(Model model) {
		for (figure : model.figures) {
			fsa.generateFile("src/main/java/org/sikessle/gameoflie/model/impl/" + figure.name.toFirstUpper +
				"Figure.java", figure.content)
		}
		// create MenuBar builder
		fsa.generateFile("src/main/java/org/sikessle/gameoflie/view/gui/FigureMenuBuilderGenerated.java", model.content)
	}
	
	def getContent(Model model) '''
		package org.sikessle.gameoflife.view.gui;

		import java.awt.event.ActionEvent;
		import java.awt.event.ActionListener;
		import java.util.ArrayList;
		import java.util.List;
		
		import javax.swing.JMenuItem;
		
		import org.sikessle.gameoflife.controller.GridController;
		import org.sikessle.gameoflife.model.Figure;
		
		«FOR figure:model.figures»
		import org.sikessle.gameoflife.model.impl.«figure.name.toFirstUpper»Figure;
		«ENDFOR»
		
		public class FigureMenuBuilderGenerated {
		
			private final GridController controller;
			private final GridDrawingPanel gridPanel;
		
			public FigureMenuBuilderGenerated(GridController controller,
					GridDrawingPanel gridPanel) {
				if (controller == null || gridPanel == null) {
					throw new IllegalArgumentException();
				}
		
				this.controller = controller;
				this.gridPanel = gridPanel;
			}
		
			public List<Figure> getFigures() {
				List<Figure> figures = new ArrayList<Figure>();
				
				«FOR figure:model.figures»
				figures.add(new «figure.name.toFirstUpper»Figure());
				«ENDFOR»
		
				return figures;
			}
		
			public List<JMenuItem> buildFiguresMenu() {
				List<JMenuItem> menuItems = new ArrayList<>();
		
				JMenuItem figureItem;
		
				for (final Figure figure : getFigures()) {
					figureItem = new JMenuItem(figure.getName());
					figureItem.addActionListener(new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent e) {
							new FigureSpawnOneTimeMouseAdapter(figure, controller,
									gridPanel);
						}
					});
					menuItems.add(figureItem);
				}
		
				return menuItems;
			}
		
		}
	'''

	def getContent(Figure figure) '''
		package org.sikessle.gameoflife.model.impl;
		      
		import java.util.ArrayList;
		import java.util.List;
		
		import org.sikessle.gameoflife.model.Coordinate;
		import org.sikessle.gameoflife.model.Figure;
		      
		public class «figure.name.toFirstUpper»Figure implements Figure {
		
			@Override
			public String getName() {
				return "«figure.name.toFirstUpper»";
			}
		
			@Override
			public List<Coordinate> getCoordinates() {
				List<Coordinate> coordinates = new ArrayList<Coordinate>();
				
				«figure.rows.content»
		
				return coordinates;
			}
		
		}
	 '''

	def getContent(EList<Row> rows) {
		figureCoords = ""

		for (i = 0; i < rows.length; i++) {
			for (j = 0; j < rows.get(i).cells.length; j++) {
				if (rows.get(i).cells.get(j).isAlive) {
					figureCoords += "coordinates.add(new CoordinateImpl(" + i + ", " + j + "));\n"
				}
			}
		}

		return figureCoords
	}

}
